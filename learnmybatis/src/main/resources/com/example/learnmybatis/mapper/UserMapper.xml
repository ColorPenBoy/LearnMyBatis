<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--mapper 的命名空间-->
<mapper namespace="com.example.learnmybatis.mapper.UserMapper">

    <resultMap id="userMap" type="com.example.learnmybatis.model.SysUser">

        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>

    </resultMap>

    <!-- <select>: 映射查询语句使用的标签。-->
    <!-- id:命名空间中的唯一标识符，可用来代表这条语句。select 标签的 id 属性值和定义的接口方法名一致 -->
    <!-- resultMap:用于设置返回值的类型和映射关系 。 -->
    <!-- select 标签中的 select 女 from sys user where id = #{id}是查询语句 。 -->
    <!-- # {id} : MyBatis SQL 中使用预编译参数的一种方式，大括号中的 id 是传入的参数名。-->
    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>

    <select id="selectAll" resultType="com.example.learnmybatis.model.SysUser">
        select id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        from sys_user
    </select>

    <select id="selectRolesByUserId" resultType="com.example.learnmybatis.model.SysRole">
        select
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

</mapper>

<!--

可以通过在 resultMap 中配直 property 属性和 column 属性的映射，或者在 SQL 中设直别名这两种方式实现将查询列映射到对象属性的目的。




-->
